for(i in 1:10){ #i in 1:10
stim1[[i]] = data[[i]][data[[i]]>0 & data[[i]]<=1]#data on interval (0,1)
stim2[[i]] = data[[i]][data[[i]]>9 & data[[i]]<=10] #data on interval (9,10)
bet_stim[[i]] = data[[i]][data[[i]]>1 & data[[i]]<=9] #data on interval (1,9)
}
return(list(stim1 = stim1, stim2 = stim2, bet_stim = bet_stim))
}
Get_stim_data = function(data){
res = lapply(data, Extract_data)
stim1 = map(res,1) #data for (0,1)  interval stimulus
stim2 = map(res,2) #data for  (9,10) interval - i.e. after stimulus
bet_stim = map(res, 3) #data for (1,9) interval - i.e. before stimulus
return(list(x = stim1, y = stim2, z = bet_stim))
}
OB_0 <- Get_stim_data(OB_0)
OB_0_stim <- OB_0$x
OB_10 <- Get_stim_data(OB_10)
OB_10_stim <- OB_10$x#, OB_10$y)
OB_50 <- Get_stim_data(OB_50)
OB_50_stim <- OB_50$x #, OB_50$y)
# function to check if numeric(0) is in the list
# is_empty <- function(lst) {
#   any(sapply(lst, function(x) is.numeric(x) && length(x) == 0))
# }
#
# # Check if numeric(0) is in the nested list
# which(sapply(OB_0_stim, is_empty))
# which(sapply(OB_10_stim, is_empty))
# which(sapply(OB_50_stim, is_empty))
# Count Points ------------------------------------------------------------
count_points = function(data){
count = NULL;
for(i in 1:26){
count[i] = mean(unlist(lapply(data[[i]], length)))
}
return(count)
}
var = rbind(count_points(OB_0_stim), count_points(OB_10_stim), count_points(OB_50_stim))
counts_tab = cbind(count_points(OB_0_stim),  count_points(OB_10_stim), count_points(OB_50_stim))
library(xtable)
xtable(counts_tab)
par(mfrow=c(1,1))
barplot(var, col = c("deepskyblue", "lightblue", "cyan2"), main = "Counts in (0,1)", xlab = "Neuron",
ylab = "Avergae No. of Events", names.arg = seq(1,26),beside = T)
legend("topright", c("0 mW/mm","10 mW/mm", "50 mW/mm"), fill = c("deepskyblue", "lightblue", "cyan2"), cex =0.8)
# Interval (1,9) ----------------------------------------------------------
OB_0_no_stim <- OB_0$z
OB_10_no_stim <- OB_10$z
OB_50_no_stim <- OB_50$z
var2 = rbind(count_points(OB_0_no_stim), count_points(OB_10_no_stim), count_points(OB_50_no_stim))
counts_tab = cbind(count_points(OB_0_no_stim), count_points(OB_10_no_stim), count_points(OB_50_no_stim))
library(xtable)
xtable(counts_tab)
par(mfrow=c(1,1))
barplot(var2, col = c("deepskyblue", "lightblue", "cyan2"), main = "Counts in (1,9)", xlab = "Neuron",
ylab = "Avergae No. of Events", names.arg = seq(1,26),beside = T)
legend("topright", c("0 mW/mm","10 mW/mm", "50 mW/mm"), fill = c("deepskyblue", "lightblue", "cyan2"), cex =0.8)
# Average No. of points ---------------------------------------------------
count_points2 = function(data1){
trials = counts = sums = points = list();
for(i in 1:10){
trials[[i]] = map(data1, i)
counts[[i]] = lapply(trials[[i]], length) #count no. of points in each data stream for trial i
points[[i]] = sum(unlist(counts[[i]])) #total sum across dimensions
}
av = mean(unlist(points))
return(round(av))
}
count_points2(OB_0_stim)
count_points2(OB_10_stim)
count_points2(OB_50_stim)
count_points2(OB_0_no_stim)
count_points2(OB_10_no_stim)
count_points2(OB_50_no_stim)
source("~/Downloads/RSE/5_Neuronal_Synchronicity/Exploratory_Analysis/Exploratory_DA.R")
par(mfrow=c(1,1))
barplot(var2, col = c("deepskyblue", "lightblue", "cyan2"), main = "Counts in (1,4)", xlab = "Neuron",
ylab = "Avergae No. of Events", names.arg = seq(1,26),beside = T)
legend("topright", c("0 mW/mm","10 mW/mm", "50 mW/mm"), fill = c("deepskyblue", "lightblue", "cyan2"), cex =0.8)
count_points2 = function(data1){
trials = counts = sums = points = list();
for(i in 1:10){
trials[[i]] = map(data1, i)
counts[[i]] = lapply(trials[[i]], length) #count no. of points in each data stream for trial i
points[[i]] = sum(unlist(counts[[i]])) #total sum across dimensions
}
av = mean(unlist(points))
return(round(av))
}
count_points2(OB_0_stim)
count_points2(OB_10_stim)
count_points2(OB_50_stim)
count_points2(OB_0_no_stim)
count_points2(OB_10_no_stim)
count_points2(OB_50_no_stim)
setwd("~/Downloads/RSE/5_Neuronal_Synchronicity/Processed_Data/Laser_on")
setwd("~/Downloads/RSE/5_Neuronal_Synchronicity/Processed_Data/Laser_on")
saveRDS(OB_0_stim, "OB_0.RDS")
saveRDS(OB_10_stim, "OB_10.RDS")
saveRDS(OB_50_stim, "OB_50.RDS")
setwd("~/Downloads/RSE/5_Neuronal_Synchronicity/Processed_Data/Laser_off")
saveRDS(OB_0_no_stim, "OB_0.RDS")
saveRDS(OB_10_no_stim, "OB_10.RDS")
saveRDS(OB_50_no_stim, "OB_50.RDS")
View(Get_stim_data)
source("~/Downloads/RSE/5_Neuronal_Synchronicity/Estimation_Procedure/Multi_trial_periodogram/Multi_Trial_Periodogram.R")
source("~/Downloads/RSE/5_Neuronal_Synchronicity/Estimation_Procedure/Multi_trial_periodogram/Multi_Trial_Periodogram.R")
source("~/Downloads/RSE/5_Neuronal_Synchronicity/Estimation_Procedure/Delta_band/Laser_on/Estimation.R")
source("~/Downloads/RSE/5_Neuronal_Synchronicity/Estimation_Procedure/Delta_band/Laser_off/Estimation.R")
library(Matrix)
library(phonTools) #for sinc function
library(QZ) #for H - conjugate transpose
library(purrr) #for map function
library(matrixStats) #for colQuantiles
library(complexplus) #for deterimnan of complex matrix
library(psych) #for trace
library(pracma) #for logspace
library(hawkes) #for simulating hawkes process via Ogata's method
setwd("~/Downloads/RSE/5_Neuronal_Synchronicity")
source("Functions_Section_5.R")
lambdas = logspace(log10(0.001), log10(10), 100)
est1_0 <- readRDS("~/Downloads/RSE/5_Neuronal_Synchronicity/Estimation_Procedure/Delta_band/Laser_on/est_0.RDS")
est1_10 <- readRDS("~/Downloads/RSE/5_Neuronal_Synchronicity/Estimation_Procedure/Delta_band/Laser_on/est_10.RDS")
est1_50 <- readRDS("~/Downloads/RSE/5_Neuronal_Synchronicity/Estimation_Procedure/Delta_band/Laser_on/est_50.RDS")
est2_0 <- readRDS("~/Downloads/RSE/5_Neuronal_Synchronicity/Estimation_Procedure/Delta_band/Laser_off/est_0.RDS")
est2_10 <- readRDS("~/Downloads/RSE/5_Neuronal_Synchronicity/Estimation_Procedure/Delta_band/Laser_off/est_10.RDS")
est2_50 <- readRDS("~/Downloads/RSE/5_Neuronal_Synchronicity/Estimation_Procedure/Delta_band/Laser_off/est_50.RDS")
res1 = calc_result(est1_0)
res2 = calc_result(est1_10)
res3 = calc_result(est1_50)
res4 = calc_result(est2_0)
res5 = calc_result(est2_10)
res6 = calc_result(est2_50)
plot_eBIC(list(res1$ebic, res2$ebic, res3$ebic), "On")
plot_eBIC(list(res4$ebic, res5$ebic, res6$ebic), "Off")
plot_ADMM(list(res1$r, res2$r, res3$r), "On")
plot_ADMM(list(res4$r, res5$r, res6$r), "Off")
# edges
edges = function(mat){
u = mat[upper.tri(mat, diag=F)]
edges = length(u[u!=0])
return(edges)
}
edges_list_on = c(edges(res1$pc), edges(res2$pc), edges(res3$pc))
edges_list_off = c(edges(res4$pc), edges(res5$pc), edges(res6$pc))
edges_list_on
edges_list_off
library(igraph)
zero = list(res4$pc, res1$pc)
zero_points = c(("AvgPoints = "), expression("AvgPoints="))
plot_UGM_new(zero, title_list = c(expression(0~mW/mm^2), expression(0~mW/mm^2)), zero_points)
library(igraph)
ten = list(res5$pc, res2$pc)
ten_points = c(("AvgPoints = 2072"), expression("AvgPoints=712"))
plot_UGM_new(ten, title_list = c(expression(10~mW/mm^2), expression(10~mW/mm^2)), ten_points)
library(igraph)
fifty = list(res6$pc, res3$pc)
fifty_points = c(("AvgPoints = 2141"), expression("AvgPoints=890"))
plot_UGM_new(fifty, title_list = c(expression(50~mW/mm^2), expression(50~mW/mm^2)), fifty_points)
library(Matrix)
library(phonTools)
library(QZ)
library(purrr)
library(matrixStats)
library(complexplus)
library(psych)
library(pracma)
library(hawkes)
library(igraph)
setwd("~/Downloads/RSE/5_Neuronal_Synchronicity")
source("Functions_Section_5.R")
OB_0 <- readRDS("~/Downloads/RSE/5_Neuronal_Synchronicity/Pre_processing/OB_0.RDS")
OB_1 <- readRDS("~/Downloads/RSE/5_Neuronal_Synchronicity/Pre_processing/OB_1.RDS")
OB_5 <- readRDS("~/Downloads/RSE/5_Neuronal_Synchronicity/Pre_processing/OB_5.RDS")
OB_10 <- readRDS("~/Downloads/RSE/5_Neuronal_Synchronicity/Pre_processing/OB_10.RDS")
OB_20 <- readRDS("~/Downloads/RSE/5_Neuronal_Synchronicity/Pre_processing/OB_20.RDS")
OB_30 <- readRDS("~/Downloads/RSE/5_Neuronal_Synchronicity/Pre_processing/OB_30.RDS")
OB_40 <- readRDS("~/Downloads/RSE/5_Neuronal_Synchronicity/Pre_processing/OB_40.RDS")
OB_50 <- readRDS("~/Downloads/RSE/5_Neuronal_Synchronicity/Pre_processing/OB_50.RDS")
OB_0 <- pre_processing_function(OB_0)
OB_1 <- pre_processing_function(OB_1)
OB_5 <- pre_processing_function(OB_5)
OB_10 <- pre_processing_function(OB_10)
OB_20 <- pre_processing_function(OB_20)
OB_30 <- pre_processing_function(OB_30)
OB_40 <- pre_processing_function(OB_40)
OB_50 <- pre_processing_function(OB_50)
par(mfrow=c(2,4),mar=c(6,7,4,2)+1.3, mgp=c(5.5,1.5,0))
spike_density(OB_0[[5]], 0.01, -5, 10, expression(0~mW/mm^2), 0, 300)
spike_density(OB_1[[5]], 0.01, -5, 10, expression(1~mW/mm^2), 0, 300)
spike_density(OB_5[[5]], 0.01, -5, 10, expression(5~mW/mm^2), 0, 300)
spike_density(OB_10[[5]], 0.01, -5, 10, expression(10~mW/mm^2), 0, 300)
spike_density(OB_20[[5]], 0.01, -5, 10, expression(20~mW/mm^2), 0, 300)
spike_density(OB_30[[5]], 0.01, -5, 10, expression(30~mW/mm^2), 0, 300)
spike_density(OB_40[[5]], 0.01, -5, 10, expression(40~mW/mm^2), 0, 300)
spike_density(OB_50[[5]], 0.01, -5, 10,  expression(50~mW/mm^2), 0, 300)
Extract_data = function(data){
stim1 = stim2 = bet_stim = list();
for(i in 1:10){ #i in 1:10
stim1[[i]] = data[[i]][data[[i]]>0 & data[[i]]<=1]#data on interval (0,1)
stim2[[i]] = data[[i]][data[[i]]>9 & data[[i]]<=10] #data on interval (9,10)
bet_stim[[i]] = data[[i]][data[[i]]>1 & data[[i]]<=4] #data on interval (1,4)
}
return(list(stim1 = stim1, stim2 = stim2, bet_stim = bet_stim))
}
Extract_data = function(data){
stim1 = stim2 = bet_stim = list();
for(i in 1:10){ #i in 1:10
stim1[[i]] = data[[i]][data[[i]]>0 & data[[i]]<=1]#data on interval (0,1)
stim2[[i]] = data[[i]][data[[i]]>9 & data[[i]]<=10] #data on interval (9,10)
bet_stim[[i]] = data[[i]][data[[i]]>1 & data[[i]]<=2] #data on interval (1,4)
}
return(list(stim1 = stim1, stim2 = stim2, bet_stim = bet_stim))
}
Get_stim_data = function(data){
res = lapply(data, Extract_data)
stim1 = map(res,1) #data for (0,1)  interval stimulus
stim2 = map(res,2) #data for  (9,10) interval - i.e. after stimulus
bet_stim = map(res, 3) #data for (1,9) interval - i.e. before stimulus
return(list(x = stim1, y = stim2, z = bet_stim))
}
OB_0 <- Get_stim_data(OB_0)
OB_0_stim <- OB_0$x
OB_10 <- Get_stim_data(OB_10)
OB_10_stim <- OB_10$x#, OB_10$y)
OB_50 <- Get_stim_data(OB_50)
OB_50_stim <- OB_50$x #, OB_50$y)
# Count Points ------------------------------------------------------------
count_points = function(data){
count = NULL;
for(i in 1:26){
count[i] = mean(unlist(lapply(data[[i]], length)))
}
return(count)
}
var = rbind(count_points(OB_0_stim), count_points(OB_10_stim), count_points(OB_50_stim))
counts_tab = cbind(count_points(OB_0_stim),  count_points(OB_10_stim), count_points(OB_50_stim))
library(xtable)
xtable(counts_tab)
par(mfrow=c(1,1))
barplot(var, col = c("deepskyblue", "lightblue", "cyan2"), main = "Counts in (0,1)", xlab = "Neuron",
ylab = "Avergae No. of Events", names.arg = seq(1,26),beside = T)
legend("topright", c("0 mW/mm","10 mW/mm", "50 mW/mm"), fill = c("deepskyblue", "lightblue", "cyan2"), cex =0.8)
OB_0_no_stim <- OB_0$z
OB_10_no_stim <- OB_10$z
OB_50_no_stim <- OB_50$z
var2 = rbind(count_points(OB_0_no_stim), count_points(OB_10_no_stim), count_points(OB_50_no_stim))
counts_tab = cbind(count_points(OB_0_no_stim), count_points(OB_10_no_stim), count_points(OB_50_no_stim))
library(xtable)
xtable(counts_tab)
par(mfrow=c(1,1))
barplot(var2, col = c("deepskyblue", "lightblue", "cyan2"), main = "Counts in (1,4)", xlab = "Neuron",
ylab = "Avergae No. of Events", names.arg = seq(1,26),beside = T)
legend("topright", c("0 mW/mm","10 mW/mm", "50 mW/mm"), fill = c("deepskyblue", "lightblue", "cyan2"), cex =0.8)
count_points2 = function(data1){
trials = counts = sums = points = list();
for(i in 1:10){
trials[[i]] = map(data1, i)
counts[[i]] = lapply(trials[[i]], length) #count no. of points in each data stream for trial i
points[[i]] = sum(unlist(counts[[i]])) #total sum across dimensions
}
av = mean(unlist(points))
return(round(av))
}
count_points2(OB_0_stim)
count_points2(OB_10_stim)
count_points2(OB_50_stim)
count_points2(OB_0_no_stim)
count_points2(OB_10_no_stim)
count_points2(OB_50_no_stim)
library(Matrix)
library(phonTools)
library(QZ)
library(purrr)
library(matrixStats)
library(complexplus)
library(psych)
library(pracma)
library(hawkes)
library(igraph)
setwd("~/Downloads/RSE/5_Neuronal_Synchronicity")
source("Functions_Section_5.R")
# Load Data ---------------------------------------------------------------
OB_0 <- readRDS("~/Downloads/RSE/5_Neuronal_Synchronicity/Pre_processing/OB_0.RDS")
OB_1 <- readRDS("~/Downloads/RSE/5_Neuronal_Synchronicity/Pre_processing/OB_1.RDS")
OB_5 <- readRDS("~/Downloads/RSE/5_Neuronal_Synchronicity/Pre_processing/OB_5.RDS")
OB_10 <- readRDS("~/Downloads/RSE/5_Neuronal_Synchronicity/Pre_processing/OB_10.RDS")
OB_20 <- readRDS("~/Downloads/RSE/5_Neuronal_Synchronicity/Pre_processing/OB_20.RDS")
OB_30 <- readRDS("~/Downloads/RSE/5_Neuronal_Synchronicity/Pre_processing/OB_30.RDS")
OB_40 <- readRDS("~/Downloads/RSE/5_Neuronal_Synchronicity/Pre_processing/OB_40.RDS")
OB_50 <- readRDS("~/Downloads/RSE/5_Neuronal_Synchronicity/Pre_processing/OB_50.RDS")
# Re-sructure Data --------------------------------------------------------
OB_0 <- pre_processing_function(OB_0)
OB_1 <- pre_processing_function(OB_1)
OB_5 <- pre_processing_function(OB_5)
OB_10 <- pre_processing_function(OB_10)
OB_20 <- pre_processing_function(OB_20)
OB_30 <- pre_processing_function(OB_30)
OB_40 <- pre_processing_function(OB_40)
OB_50 <- pre_processing_function(OB_50)
# Spike Density Plots -----------------------------------------------------
par(mfrow=c(2,4),mar=c(6,7,4,2)+1.3, mgp=c(5.5,1.5,0))
spike_density(OB_0[[5]], 0.01, -5, 10, expression(0~mW/mm^2), 0, 300)
spike_density(OB_1[[5]], 0.01, -5, 10, expression(1~mW/mm^2), 0, 300)
spike_density(OB_5[[5]], 0.01, -5, 10, expression(5~mW/mm^2), 0, 300)
spike_density(OB_10[[5]], 0.01, -5, 10, expression(10~mW/mm^2), 0, 300)
spike_density(OB_20[[5]], 0.01, -5, 10, expression(20~mW/mm^2), 0, 300)
spike_density(OB_30[[5]], 0.01, -5, 10, expression(30~mW/mm^2), 0, 300)
spike_density(OB_40[[5]], 0.01, -5, 10, expression(40~mW/mm^2), 0, 300)
spike_density(OB_50[[5]], 0.01, -5, 10,  expression(50~mW/mm^2), 0, 300)
# Extract data for laser on/off scenarios ---------------------------------
Extract_data = function(data){
stim1 = stim2 = bet_stim = list();
for(i in 1:10){ #i in 1:10
stim1[[i]] = data[[i]][data[[i]]>0 & data[[i]]<=1]#data on interval (0,1)
stim2[[i]] = data[[i]][data[[i]]>9 & data[[i]]<=10] #data on interval (9,10)
bet_stim[[i]] = data[[i]][data[[i]]>1 & data[[i]]<=4] #data on interval (1,4)
}
return(list(stim1 = stim1, stim2 = stim2, bet_stim = bet_stim))
}
Get_stim_data = function(data){
res = lapply(data, Extract_data)
stim1 = map(res,1) #data for (0,1)  interval stimulus
stim2 = map(res,2) #data for  (9,10) interval - i.e. after stimulus
bet_stim = map(res, 3) #data for (1,9) interval - i.e. before stimulus
return(list(x = stim1, y = stim2, z = bet_stim))
}
OB_0 <- Get_stim_data(OB_0)
OB_0_stim <- OB_0$x
OB_10 <- Get_stim_data(OB_10)
OB_10_stim <- OB_10$x#, OB_10$y)
OB_50 <- Get_stim_data(OB_50)
OB_50_stim <- OB_50$x #, OB_50$y)
# function to check if numeric(0) is in the list
# is_empty <- function(lst) {
#   any(sapply(lst, function(x) is.numeric(x) && length(x) == 0))
# }
#
# # Check if numeric(0) is in the nested list
# which(sapply(OB_0_stim, is_empty))
# which(sapply(OB_10_stim, is_empty))
# which(sapply(OB_50_stim, is_empty))
# Count Points ------------------------------------------------------------
count_points = function(data){
count = NULL;
for(i in 1:26){
count[i] = mean(unlist(lapply(data[[i]], length)))
}
return(count)
}
var = rbind(count_points(OB_0_stim), count_points(OB_10_stim), count_points(OB_50_stim))
counts_tab = cbind(count_points(OB_0_stim),  count_points(OB_10_stim), count_points(OB_50_stim))
library(xtable)
xtable(counts_tab)
par(mfrow=c(1,1))
barplot(var, col = c("deepskyblue", "lightblue", "cyan2"), main = "Counts in (0,1)", xlab = "Neuron",
ylab = "Avergae No. of Events", names.arg = seq(1,26),beside = T)
legend("topright", c("0 mW/mm","10 mW/mm", "50 mW/mm"), fill = c("deepskyblue", "lightblue", "cyan2"), cex =0.8)
# Interval (1,94) ----------------------------------------------------------
OB_0_no_stim <- OB_0$z
OB_10_no_stim <- OB_10$z
OB_50_no_stim <- OB_50$z
var2 = rbind(count_points(OB_0_no_stim), count_points(OB_10_no_stim), count_points(OB_50_no_stim))
counts_tab = cbind(count_points(OB_0_no_stim), count_points(OB_10_no_stim), count_points(OB_50_no_stim))
library(xtable)
xtable(counts_tab)
par(mfrow=c(1,1))
barplot(var2, col = c("deepskyblue", "lightblue", "cyan2"), main = "Counts in (1,4)", xlab = "Neuron",
ylab = "Avergae No. of Events", names.arg = seq(1,26),beside = T)
legend("topright", c("0 mW/mm","10 mW/mm", "50 mW/mm"), fill = c("deepskyblue", "lightblue", "cyan2"), cex =0.8)
# Average No. of points ---------------------------------------------------
count_points2 = function(data1){
trials = counts = sums = points = list();
for(i in 1:10){
trials[[i]] = map(data1, i)
counts[[i]] = lapply(trials[[i]], length) #count no. of points in each data stream for trial i
points[[i]] = sum(unlist(counts[[i]])) #total sum across dimensions
}
av = mean(unlist(points))
return(round(av))
}
count_points2(OB_0_stim)
count_points2(OB_10_stim)
count_points2(OB_50_stim)
count_points2(OB_0_no_stim)
count_points2(OB_10_no_stim)
count_points2(OB_50_no_stim)
# No laser investigation --------------------------------------------------
library(Matrix)
library(phonTools)
library(QZ)
library(purrr)
library(matrixStats)
library(complexplus)
library(psych)
library(pracma)
library(hawkes)
library(igraph)
setwd("~/Downloads/RSE/5_Neuronal_Synchronicity")
source("Functions_Section_5.R")
OB_0 <- readRDS("~/Downloads/RSE/5_Neuronal_Synchronicity/Pre_processing/OB_0.RDS")
OB_0 <- pre_processing_function(OB_0)
Extract_data = function(data){
stim1 = stim2 = bet_stim = list();
for(i in 1:10){ #i in 1:10
stim1[[i]] = data[[i]][data[[i]]>0 & data[[i]]<=1]#data on interval (0,1)
stim2[[i]] = data[[i]][data[[i]]>9 & data[[i]]<=10] #data on interval (9,10)
bet_stim[[i]] = data[[i]][data[[i]]>1 & data[[i]]<=2] #data on interval (1,2)
}
return(list(stim1 = stim1, stim2 = stim2, bet_stim = bet_stim))
}
Get_stim_data = function(data){
res = lapply(data, Extract_data)
stim1 = map(res,1) #data for (0,1)  interval stimulus
stim2 = map(res,2) #data for  (9,10) interval - i.e. after stimulus
bet_stim = map(res, 3) #data for (1,9) interval - i.e. before stimulus
return(list(x = stim1, y = stim2, z = bet_stim))
}
OB_0 <- Get_stim_data(OB_0)
OB_0_stim <- OB_0$x
OB_0_no_stim <- OB_0$z
Trial_freq_Estimator
S_hat = Trial_freq_Estimator(om, OB_0_no_stim, 1)$pooled_s
# periodogram for no laser condition --------------------------------------
om= seq(1,50) *2*pi
S_hat = Trial_freq_Estimator(om, OB_0_no_stim, 1)$pooled_s
setwd("~/Downloads/RSE/5_Neuronal_Synchronicity/Estimation_Procedure/zero_investigations")
saveRDS(S_hat, "S_hat.RDS")
library(pracma)
lambdas = logspace(log10(0.001), log10(10), 100)
library(doParallel)
library(doRNG)
cl <- makeCluster(4)
start <- Sys.time()
registerDoParallel(cl)
registerDoRNG(seed = 123)
res <- foreach(j=lambdas,  .packages = c("Matrix","phonTools", "QZ", "purrr", "matrixStats", "complexplus",
"psych", "pracma", "hawkes")) %dopar%{
setwd("~/Downloads/RSE/5_Neuronal_Synchronicity")
source("Functions_Section_5.R")
n.trials = 10
n.stream = 26
S_hat <- readRDS("~/Downloads/RSE/5_Neuronal_Synchronicity/Estimation_Procedure/zero_investigations/S_hat.RDS")
freqs <- readRDS("~/Downloads/RSE/5_Neuronal_Synchronicity/Estimation_Procedure/Multi_trial_periodogram/freqs.RDS")
S_hat = S_hat[[1]]
f = freqs[1]
Max_iter = 1000
out = glasso(n.stream, j, S_hat, Max_iter)
theta = out$theta
zs = out$z
gam = 0.5
lik = eBIC(theta, S_hat, zs, gam, n.stream, f, n.trials)
return(list(eBIC = lik, theta = theta, z = zs, r = out$r ) )
}
end <-Sys.time()
stopCluster(cl)
print(end-start)
out = calc_result(res)
plot(out$ebic)
plot(lambdas, out$ebic)
edges(out$pc)
edges = function(mat){
u = mat[upper.tri(mat, diag=F)]
edges = length(u[u!=0])
return(edges)
}
edges(out$pc)
# load previous results
est1_0 <- readRDS("~/Downloads/RSE/5_Neuronal_Synchronicity/Estimation_Procedure/Delta_band/Laser_on/est_0.RDS")
res1 = calc_result(est1_0)
library(igraph)
zero = list(out$pc, res1$pc)
zero_points = c(("AvgPoints = "), expression("AvgPoints="))
plot_UGM_new(zero, title_list = c(expression(0~mW/mm^2), expression(0~mW/mm^2)), zero_points)
res1$idx
out$idx
edges(res1$pc)
edges(out$ebic)
edges(out$pc)
plot_eBIC(out$ebic, "")
out$ebic
length(out$ebic)
plot(lambdas, out$ebic)
lambdas
abline(v=lambdas[out$idx])
abline(v=lambdas[res1$idx])
lines(lambdas, res1$ebic, col="blue")
source("~/Downloads/RSE/5_Neuronal_Synchronicity/zero_laser_investigations.R")
source("~/Downloads/RSE/5_Neuronal_Synchronicity/Estimation_Procedure/Results/Delta_band_results.R")
check = list(res4$pc, res5$pc)
check_points =  c(("AvgPoints = 778"), expression("AvgPoints=799"))
plot_UGM_new(check, title_list = c(expression(0~mW/mm^2), expression(10~mW/mm^2)), check_points)
check = list(res5$pc, res6$pc)
check_points =  c(("AvgPoints = 778"), expression("AvgPoints=799"))
plot_UGM_new(check, title_list = c(expression(0~mW/mm^2), expression(10~mW/mm^2)), check_points)
check = list(res4$pc, res6$pc)
check_points =  c(("AvgPoints = 778"), expression("AvgPoints=799"))
plot_UGM_new(check, title_list = c(expression(0~mW/mm^2), expression(10~mW/mm^2)), check_points)
edges_list_on
edges_list_off
source("~/Downloads/RSE/5_Neuronal_Synchronicity/Estimation_Procedure/Results/Delta_band_results.R")
source("~/Downloads/RSE/5_Neuronal_Synchronicity/Estimation_Procedure/Results/Delta_band_results.R")
source("~/Downloads/RSE/5_Neuronal_Synchronicity/Estimation_Procedure/Results/Delta_band_results.R")
check = list(res2$pc, res3$pc)
check_points =  c(("AvgPoints = 712"), expression("AvgPoints = 890"))
plot_UGM_new(check, title_list = c(expression(10~mW/mm^2), expression(50~mW/mm^2)), check_points)
source("~/Downloads/RSE/5_Neuronal_Synchronicity/Estimation_Procedure/Results/Delta_band_results.R")
source("~/Downloads/RSE/5_Neuronal_Synchronicity/Estimation_Procedure/Results/Delta_band_results.R")
title_list = c("","","")
source("~/Downloads/RSE/5_Neuronal_Synchronicity/Estimation_Procedure/Results/Delta_band_results.R")
edges_list_on
edges_list_off
