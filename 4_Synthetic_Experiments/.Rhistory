boxplot(df_50_2000, main = paste0(model_type, " - 2000"), ylim =c(0.85, 0.99))
boxplot(df_50_5000, main = paste0(model_type, " - 5000"), ylim =c(0.85, 0.99))
boxplot(df_50_10000, main = paste0(model_type, " - 10000"), ylim =c(0.85, 0.99))
out_1000 = c(res_50_1000$s_cov_mean, res_50_1000$sc_cov_mean, res_50_1000$av_len_s, res_50_1000$av_len_sc)
out_2000 = c(res_50_2000$s_cov_mean, res_50_2000$sc_cov_mean, res_50_2000$av_len_s, res_50_2000$av_len_sc)
out_5000 = c(res_50_5000$s_cov_mean, res_50_5000$sc_cov_mean, res_50_5000$av_len_s, res_50_5000$av_len_sc)
out_10000 = c(res_50_10000$s_cov_mean, res_50_10000$sc_cov_mean, res_50_10000$av_len_s, res_50_10000$av_len_sc)
out2 = rbind(out_1000, out_2000, out_5000, out_10000)
colnames(out2) = c("Avcov_s", "Avcov_sc", "Avlen_s", "Avlen_sc")
return(out2)
}
n_samp = seq(1,100)
p = 10;
beta <- readRDS("~/Downloads/GAPLA_FC/Synthetic_Experiments/Model_B2/Simulate_Data/beta_10.RDS")
image(beta)
# Read 50/50 data from STORM
out_50_1000_desparsified <- readRDS("~/luna/GAPLA_FC/Synthetic_Experiments/Model_B2/inference/20/s1_results/out_50_1000_desparsified.RDS")
# Read 50/50 data from STORM
out_50_1000_desparsified <- readRDS("~/luna/GAPLA_FC/Synthetic_Experiments/Model_B2/inference/10/s1_results/out_50_1000_desparsified.RDS")
library(purrr) # map
coverage = function(active, true_beta, out_storm, n_samp, unit_id){
# select results of interest
b = length(n_samp)*unit_id #i.e. for unit_id = 1 b = 100
if(unit_id==1){
res = out_storm[1:b] #i.e. samples 1-100 for unit 1
}
if(unit_id!=1){
res = out_storm[((b-length(n_samp))+1):b]
}
true_beta = beta[unit_id,]
if(active==T){
s = which(true_beta!=0) # active set#
}
if(active==F){
s_c = which(true_beta==0)
s = s_c
}
lower = map(res, 3)
upper = map(res, 4)
truth = true_beta[s]
s_count = rep(0,length(truth)); s_count = rep(list(s_count), length(n_samp))
length_ci = rep(0, length(truth)); length_ci = rep(list(length_ci), length(n_samp))
for(i in 1:length(n_samp)){
lower_vals = lower[[i]][s]
upper_vals = upper[[i]][s]
for(j in 1:length(truth)){
if(truth[j]>lower_vals[j] & truth[j]<upper_vals[j]){s_count[[i]][j] = s_count[[i]][j] + 1}
}
# get lengths of CI
length_ci[[i]] = upper_vals-lower_vals
}
totals = unlist(lapply(s_count, sum))
avg_cov = sum(totals)/(length(n_samp)*length(s))
# lengths
t_length = unlist(lapply(length_ci, sum))
av_length = sum(t_length)/ (length(n_samp)*length(s))
return(list(cov = avg_cov, len = av_length))
}
get_avg_cov = function(true_beta, out, n_samp, p){
s_cov = NULL; sc_cov = NULL;
s_len = NULL; sc_len = NULL;
for(i in 1:p){
s_cov[i] = coverage(T, true_beta, out, n_samp, i)$cov
sc_cov[i] = coverage(F, true_beta, out, n_samp, i)$cov
s_len[i] = coverage(T, true_beta, out, n_samp, i)$len
sc_len[i] = coverage(F, true_beta, out, n_samp, i)$len
}
return(list(s_cov_mean = mean(s_cov), sc_cov_mean = mean(sc_cov), s_all = s_cov, sc_all = sc_cov, av_len_s = mean(s_len), av_len_sc = mean(sc_len)))
}
Format_results = function(true_beta, out, n_samp, p,model_type){
res_50_1000 = get_avg_cov(true_beta, out[[1]], n_samp, p)
res_50_2000 = get_avg_cov(true_beta, out[[2]], n_samp, p)
res_50_5000 = get_avg_cov(true_beta, out[[3]], n_samp, p)
res_50_10000 = get_avg_cov(true_beta, out[[4]], n_samp, p)
df_50_1000 = data.frame(s = res_50_1000$s_all, sc=res_50_1000$sc_all)
df_50_2000 = data.frame(s = res_50_2000$s_all, sc=res_50_2000$sc_all)
df_50_5000 = data.frame(s = res_50_5000$s_all, sc=res_50_5000$sc_all)
df_50_10000 = data.frame(s = res_50_10000$s_all, sc=res_50_10000$sc_all)
par(mfrow=c(1,4))
boxplot(df_50_1000, main = paste0(model_type, " - 1000"), ylim =c(0.85, 0.99))
boxplot(df_50_2000, main = paste0(model_type, " - 2000"), ylim =c(0.85, 0.99))
boxplot(df_50_5000, main = paste0(model_type, " - 5000"), ylim =c(0.85, 0.99))
boxplot(df_50_10000, main = paste0(model_type, " - 10000"), ylim =c(0.85, 0.99))
out_1000 = c(res_50_1000$s_cov_mean, res_50_1000$sc_cov_mean, res_50_1000$av_len_s, res_50_1000$av_len_sc)
out_2000 = c(res_50_2000$s_cov_mean, res_50_2000$sc_cov_mean, res_50_2000$av_len_s, res_50_2000$av_len_sc)
out_5000 = c(res_50_5000$s_cov_mean, res_50_5000$sc_cov_mean, res_50_5000$av_len_s, res_50_5000$av_len_sc)
out_10000 = c(res_50_10000$s_cov_mean, res_50_10000$sc_cov_mean, res_50_10000$av_len_s, res_50_10000$av_len_sc)
out2 = rbind(out_1000, out_2000, out_5000, out_10000)
colnames(out2) = c("Avcov_s", "Avcov_sc", "Avlen_s", "Avlen_sc")
return(out2)
}
n_samp = seq(1,100)
p = 10;
beta <- readRDS("~/Downloads/GAPLA_FC/Synthetic_Experiments/Model_B2/Simulate_Data/beta_10.RDS")
# Read 50/50 data from STORM
out_50_1000_desparsified <- readRDS("~/luna/GAPLA_FC/Synthetic_Experiments/Model_B2/inference/10/s1_results/out_50_1000_desparsified.RDS")
out_50_2000_desparsified <- readRDS("~/luna/GAPLA_FC/Synthetic_Experiments/Model_B2/inference/10/s1_results/out_50_2000_desparsified.RDS")
out_50_5000_desparsified <- readRDS("~/luna/GAPLA_FC/Synthetic_Experiments/Model_B2/inference/10/s1_results/out_50_5000_desparsified.RDS")
out_50_10000_desparsified <- readRDS("~/luna/GAPLA_FC/Synthetic_Experiments/Model_B2/inference/10/s1_results/out_50_10000_desparsified.RDS")
# Results for 50/50 data
out50 = list(out_50_1000_desparsified, out_50_2000_desparsified, out_50_5000_desparsified, out_50_10000_desparsified)
res_50_s1 = Format_results(true_beta, out50, n_samp, p, "50")
res_50_s1
out_zero_1000_desparsified <- readRDS("~/luna/GAPLA_FC/Synthetic_Experiments/Model_B2/inference/10/s1_results/out_zero_1000_desparsified.RDS")
out_zero_2000_desparsified <- readRDS("~/luna/GAPLA_FC/Synthetic_Experiments/Model_B2/inference/10/s1_results/out_zero_2000_desparsified.RDS")
out_zero_5000_desparsified <- readRDS("~/luna/GAPLA_FC/Synthetic_Experiments/Model_B2/inference/10/s1_results/out_zero_5000_desparsified.RDS")
out_zero_10000_desparsified <- readRDS("~/luna/GAPLA_FC/Synthetic_Experiments/Model_B2/inference/10/s1_results/out_zero_10000_desparsified.RDS")
outzero = list(out_zero_1000_desparsified, out_zero_2000_desparsified, out_zero_5000_desparsified, out_zero_10000_desparsified)
res_zero_s1 = Format_results(true_beta, outzero, n_samp, p, "zero")
setwd("~/Downloads/GAPLA_FC/Synthetic_Experiments/Model_B2/Inference/10")
saveRDS(res_50_s1, "res_50_s1.RDS")
saveRDS(res_zero_s1, "res_zero_s1.RDS")
# Libraries
library(purrr) # map
# Functions used in this script -------------------------------------------
coverage = function(active, true_beta, out_storm, n_samp, unit_id){
# select results of interest
b = length(n_samp)*unit_id #i.e. for unit_id = 1 b = 100
if(unit_id==1){
res = out_storm[1:b] #i.e. samples 1-100 for unit 1
}
if(unit_id!=1){
res = out_storm[((b-length(n_samp))+1):b]
}
true_beta = beta[unit_id,]
if(active==T){
s = which(true_beta!=0) # active set#
}
if(active==F){
s_c = which(true_beta==0)
s = s_c
}
lower = map(res, 3)
upper = map(res, 4)
truth = true_beta[s]
s_count = rep(0,length(truth)); s_count = rep(list(s_count), length(n_samp))
length_ci = rep(0, length(truth)); length_ci = rep(list(length_ci), length(n_samp))
for(i in 1:length(n_samp)){
lower_vals = lower[[i]][s]
upper_vals = upper[[i]][s]
for(j in 1:length(truth)){
if(truth[j]>lower_vals[j] & truth[j]<upper_vals[j]){s_count[[i]][j] = s_count[[i]][j] + 1}
}
# get lengths of CI
length_ci[[i]] = upper_vals-lower_vals
}
totals = unlist(lapply(s_count, sum))
avg_cov = sum(totals)/(length(n_samp)*length(s))
# lengths
t_length = unlist(lapply(length_ci, sum))
av_length = sum(t_length)/ (length(n_samp)*length(s))
return(list(cov = avg_cov, len = av_length))
}
get_avg_cov = function(true_beta, out, n_samp, p){
s_cov = NULL; sc_cov = NULL;
s_len = NULL; sc_len = NULL;
for(i in 1:p){
s_cov[i] = coverage(T, true_beta, out, n_samp, i)$cov
sc_cov[i] = coverage(F, true_beta, out, n_samp, i)$cov
s_len[i] = coverage(T, true_beta, out, n_samp, i)$len
sc_len[i] = coverage(F, true_beta, out, n_samp, i)$len
}
return(list(s_cov_mean = mean(s_cov), sc_cov_mean = mean(sc_cov), s_all = s_cov, sc_all = sc_cov, av_len_s = mean(s_len), av_len_sc = mean(sc_len)))
}
Format_results = function(true_beta, out, n_samp, p,model_type){
res_50_1000 = get_avg_cov(true_beta, out[[1]], n_samp, p)
res_50_2000 = get_avg_cov(true_beta, out[[2]], n_samp, p)
res_50_5000 = get_avg_cov(true_beta, out[[3]], n_samp, p)
res_50_10000 = get_avg_cov(true_beta, out[[4]], n_samp, p)
df_50_1000 = data.frame(s = res_50_1000$s_all, sc=res_50_1000$sc_all)
df_50_2000 = data.frame(s = res_50_2000$s_all, sc=res_50_2000$sc_all)
df_50_5000 = data.frame(s = res_50_5000$s_all, sc=res_50_5000$sc_all)
df_50_10000 = data.frame(s = res_50_10000$s_all, sc=res_50_10000$sc_all)
par(mfrow=c(1,4))
boxplot(df_50_1000, main = paste0(model_type, " - 1000"), ylim =c(0.85, 0.99))
boxplot(df_50_2000, main = paste0(model_type, " - 2000"), ylim =c(0.85, 0.99))
boxplot(df_50_5000, main = paste0(model_type, " - 5000"), ylim =c(0.85, 0.99))
boxplot(df_50_10000, main = paste0(model_type, " - 10000"), ylim =c(0.85, 0.99))
out_1000 = c(res_50_1000$s_cov_mean, res_50_1000$sc_cov_mean, res_50_1000$av_len_s, res_50_1000$av_len_sc)
out_2000 = c(res_50_2000$s_cov_mean, res_50_2000$sc_cov_mean, res_50_2000$av_len_s, res_50_2000$av_len_sc)
out_5000 = c(res_50_5000$s_cov_mean, res_50_5000$sc_cov_mean, res_50_5000$av_len_s, res_50_5000$av_len_sc)
out_10000 = c(res_50_10000$s_cov_mean, res_50_10000$sc_cov_mean, res_50_10000$av_len_s, res_50_10000$av_len_sc)
out2 = rbind(out_1000, out_2000, out_5000, out_10000)
colnames(out2) = c("Avcov_s", "Avcov_sc", "Avlen_s", "Avlen_sc")
return(out2)
}
# Ground truth and structure of data --------------------------------------
n_samp = seq(1,100)
p = 10;
beta <- readRDS("~/Downloads/GAPLA_FC/Synthetic_Experiments/Model_B2/Simulate_Data/beta_10.RDS")
# Stage 1 Results ---------------------------------------------------------
# Read 50/50 data from STORM
out_50_1000_desparsified <- readRDS("~/luna/GAPLA_FC/Synthetic_Experiments/Model_B2/inference/10/s1_results/out_50_1000_desparsified.RDS")
out_50_2000_desparsified <- readRDS("~/luna/GAPLA_FC/Synthetic_Experiments/Model_B2/inference/10/s1_results/out_50_2000_desparsified.RDS")
out_50_5000_desparsified <- readRDS("~/luna/GAPLA_FC/Synthetic_Experiments/Model_B2/inference/10/s1_results/out_50_5000_desparsified.RDS")
out_50_10000_desparsified <- readRDS("~/luna/GAPLA_FC/Synthetic_Experiments/Model_B2/inference/10/s1_results/out_50_10000_desparsified.RDS")
# Results for 50/50 data
out50 = list(out_50_1000_desparsified, out_50_2000_desparsified, out_50_5000_desparsified, out_50_10000_desparsified)
res_50_s1 = Format_results(true_beta, out50, n_samp, p, "50")
# zero results
out_zero_1000_desparsified <- readRDS("~/luna/GAPLA_FC/Synthetic_Experiments/Model_B2/inference/10/s1_results/out_zero_1000_desparsified.RDS")
out_zero_2000_desparsified <- readRDS("~/luna/GAPLA_FC/Synthetic_Experiments/Model_B2/inference/10/s1_results/out_zero_2000_desparsified.RDS")
out_zero_5000_desparsified <- readRDS("~/luna/GAPLA_FC/Synthetic_Experiments/Model_B2/inference/10/s1_results/out_zero_5000_desparsified.RDS")
out_zero_10000_desparsified <- readRDS("~/luna/GAPLA_FC/Synthetic_Experiments/Model_B2/inference/10/s1_results/out_zero_10000_desparsified.RDS")
outzero = list(out_zero_1000_desparsified, out_zero_2000_desparsified, out_zero_5000_desparsified, out_zero_10000_desparsified)
res_zero_s1 = Format_results(true_beta, outzero, n_samp, p, "zero")
# Stage 2 results ---------------------------------------------------------
# zero model
out_zero_1000_s2_desparsified <- readRDS("~/luna/GAPLA_FC/Synthetic_Experiments/Model_B2/inference/10/s2_results/out_zero_1000_desparsified.RDS")
out_zero_2000_s2_desparsified <- readRDS("~/luna/GAPLA_FC/Synthetic_Experiments/Model_B2/inference/10/s2_results/out_zero_2000_desparsified.RDS")
out_zero_5000_s2_desparsified <- readRDS("~/luna/GAPLA_FC/Synthetic_Experiments/Model_B2/inference/10/s2_results/out_zero_5000_desparsified.RDS")
out_zero_10000_s2_desparsified <- readRDS("~/luna/GAPLA_FC/Synthetic_Experiments/Model_B2/inference/10/s2_results/out_zero_10000_desparsified.RDS")
outzero_s2 = list(out_zero_1000_s2_desparsified, out_zero_2000_s2_desparsified, out_zero_5000_s2_desparsified, out_zero_10000_s2_desparsified)
res_zero_s2 = Format_results(true_beta, outzero_s2, n_samp, p, "zero")
# 50/50 model
out_50_1000_s2_desparsified <- readRDS("~/luna/GAPLA_FC/Synthetic_Experiments/Model_B2/inference/10/s2_results/out_50_1000_desparsified.RDS")
out_50_2000_s2_desparsified <- readRDS("~/luna/GAPLA_FC/Synthetic_Experiments/Model_B2/inference/10/s2_results/out_50_2000_desparsified.RDS")
out_50_5000_s2_desparsified <- readRDS("~/luna/GAPLA_FC/Synthetic_Experiments/Model_B2/inference/10/s2_results/out_50_5000_desparsified.RDS")
out_50_10000_s2_desparsified <- readRDS("~/luna/GAPLA_FC/Synthetic_Experiments/Model_B2/inference/10/s2_results/out_50_10000_desparsified.RDS")
out_50_s2 = list(out_50_1000_s2_desparsified, out_50_2000_s2_desparsified, out_50_5000_s2_desparsified, out_50_10000_s2_desparsified)
res_50_s2 = Format_results(true_beta, out_50_s2, n_samp, p, "50")
res_50_s2
res_50_s1
round(res_50_s1,2)
round(res_50_s1,2)
round(res_50_s2,2)
setwd("~/Downloads/GAPLA_FC/Synthetic_Experiments/Model_B2/Inference/10")
saveRDS(res_50_s1, "res_50_s1.RDS")
saveRDS(res_zero_s1, "res_zero_s1.RDS")
saveRDS(res_50_s2, "res_50_s2.RDS")
saveRDS(res_zero_s2, "res_zero_s2.RDS")
beta_10
beta
par(mfrow=c(1,1))
image(beta)
# Function to plot graph
plot_graph = function(beta_matrix, arrow_size, node_size){
library(igraph)
# Create a graph from the matrix
graph <- graph_from_adjacency_matrix(100*beta_matrix, mode = "directed", weighted = T, diag = F)
# Set edge colors based on the sign of the matrix values
E(graph)$color <- ifelse(E(graph)$weight > 0, "red", "blue")
# Set vertex color to white
V(graph)$color <- "white"
# Set vertex label color to black
V(graph)$label.color <- "black"
V(graph)$size <- node_size
# Plot the graph
#plot(graph, edge.arrow.size = 0.5, vertex.label = NA, edge.width = 2, edge.curved = 0.2)
set.seed(123)
plot(graph, edge.arrow.size = arrow_size, vertex.label = seq(1,dim(beta_matrix)[1]), edge.width = 2, edge.curved=0.2)
}
plot_graph(beta, 0.5, 10)
plot_graph(beta, 0.5, 8)
par(mar = c(0.1,0.1,0.1,0.1))
plot_graph(beta, 0.5, 8)
beta2 = beta
beta2[beta2>0] = 1 # change positive entries to +1
beta2[beta2<0] = -1 # change positive entries to +1
plot_graph(beta2, 0.5, 10)
# Function to plot graph
plot_graph = function(beta_matrix, arrow_size, node_size){
library(igraph)
# Create a graph from the matrix
graph <- graph_from_adjacency_matrix(100*beta_matrix, mode = "directed", weighted = T, diag = F)
# Set edge colors based on the sign of the matrix values
E(graph)$color <- ifelse(E(graph)$weight > 0, "red", "blue")
# Set vertex color to white
V(graph)$color <- "white"
# Set vertex label color to black
V(graph)$label.color <- "black"
V(graph)$size <- node_size
# Plot the graph
#plot(graph, edge.arrow.size = 0.5, vertex.label = NA, edge.width = 2, edge.curved = 0.2)
set.seed(123)
# Set the layout to circular
layout <- layout_in_circle(graph)
plot(graph, edge.arrow.size = arrow_size, vertex.label = seq(1,dim(beta_matrix)[1]), edge.width = 2, edge.curved=0.2)
}
plot_graph(beta2, 0.5, 10)
plot_graph(abs(beta2), 0.5, 10)
plot_graph((beta2), 0.5, 10)
# Function to plot graph
plot_graph = function(beta_matrix, arrow_size, node_size){
library(igraph)
# Create a graph from the matrix
graph <- graph_from_adjacency_matrix(100*beta_matrix, mode = "directed", weighted = T, diag = F)
# Set edge colors based on the sign of the matrix values
E(graph)$color <- ifelse(E(graph)$weight > 0, "red", "blue")
# Set vertex color to white
V(graph)$color <- "white"
# Set vertex label color to black
V(graph)$label.color <- "black"
V(graph)$size <- node_size
# Plot the graph
#plot(graph, edge.arrow.size = 0.5, vertex.label = NA, edge.width = 2, edge.curved = 0.2)
#set.seed(123)
# Set the layout to circular
layout <- layout_in_circle(graph)
plot(graph, edge.arrow.size = arrow_size, vertex.label = seq(1,dim(beta_matrix)[1]), edge.width = 2, edge.curved=0.2)
}
plot_graph((beta2), 0.5, 10)
set.seed(1)
plot_graph((beta2), 0.5, 10)
set.seed(5)
plot_graph((beta2), 0.5, 10)
plot_graph((beta2), 0.5, 10)
plot_graph((beta2), 0.5, 10)
plot_graph((beta2), 0.5, 10)
plot_graph((beta2), 0.5, 10)
set.seed(1234)
plot_graph((beta2), 0.5, 10)
set.seed(12345)
plot_graph((beta2), 0.5, 10)
set.seed(6)
plot_graph((beta2), 0.5, 10)
set.seed(55)
plot_graph((beta2), 0.5, 10)
set.seed(25)
plot_graph((beta2), 0.5, 10)
set.seed(555)
plot_graph((beta2), 0.5, 10)
rmse_50 <- readRDS("~/Downloads/GAPLA_FC/Synthetic_Experiments/Model_B2/Simulations/10/rmse_50.RDS")
AUC_50 <- readRDS("~/Downloads/GAPLA_FC/Synthetic_Experiments/Model_B2/Simulations/10/AUC_50.RDS")
rmse_zero <- readRDS("~/Downloads/GAPLA_FC/Synthetic_Experiments/Model_B2/Simulations/10/rmse_zero.RDS")
AUC_50 <- readRDS("~/Downloads/GAPLA_FC/Synthetic_Experiments/Model_B2/Simulations/10/AUC_50.RDS")
AUC_zero <- readRDS("~/Downloads/GAPLA_FC/Synthetic_Experiments/Model_B2/Simulations/10/AUC_zero.RDS")
round(rmse_50,2)
refit_50 <- readRDS("~/Downloads/GAPLA_FC/Synthetic_Experiments/Model_B2/Refit/10/rmse_50.RDS")
refit_zero <- readRDS("~/Downloads/GAPLA_FC/Synthetic_Experiments/Model_B2/Refit/10/rmse_zero.RDS")
round(cbind(rmse_50, refit_50, rmse_zero, refit_zero, AUC_50, AUC_zero),2)
df = as.data.frame(round(cbind(rmse_50, refit_50, rmse_zero, refit_zero, AUC_50, AUC_zero),2))
colnames(df)
colnames(df) = c("50_1", "50_2" ,"ZI_1", "ZI_2", "50", "ZI")
df
library(purrr) # map
coverage = function(active, true_beta, out_storm, n_samp, unit_id){
# select results of interest
b = length(n_samp)*unit_id #i.e. for unit_id = 1 b = 100
if(unit_id==1){
res = out_storm[1:b] #i.e. samples 1-100 for unit 1
}
if(unit_id!=1){
res = out_storm[((b-length(n_samp))+1):b]
}
true_beta = beta[unit_id,]
if(active==T){
s = which(true_beta!=0) # active set#
}
if(active==F){
s_c = which(true_beta==0)
s = s_c
}
lower = map(res, 3)
upper = map(res, 4)
truth = true_beta[s]
s_count = rep(0,length(truth)); s_count = rep(list(s_count), length(n_samp))
length_ci = rep(0, length(truth)); length_ci = rep(list(length_ci), length(n_samp))
for(i in 1:length(n_samp)){
lower_vals = lower[[i]][s]
upper_vals = upper[[i]][s]
for(j in 1:length(truth)){
if(truth[j]>lower_vals[j] & truth[j]<upper_vals[j]){s_count[[i]][j] = s_count[[i]][j] + 1}
}
# get lengths of CI
length_ci[[i]] = upper_vals-lower_vals
}
totals = unlist(lapply(s_count, sum))
avg_cov = sum(totals)/(length(n_samp)*length(s))
# lengths
t_length = unlist(lapply(length_ci, sum))
av_length = sum(t_length)/ (length(n_samp)*length(s))
return(list(cov = avg_cov, len = av_length))
}
get_avg_cov = function(true_beta, out, n_samp, p){
s_cov = NULL; sc_cov = NULL;
s_len = NULL; sc_len = NULL;
for(i in 1:p){
s_cov[i] = coverage(T, true_beta, out, n_samp, i)$cov
sc_cov[i] = coverage(F, true_beta, out, n_samp, i)$cov
s_len[i] = coverage(T, true_beta, out, n_samp, i)$len
sc_len[i] = coverage(F, true_beta, out, n_samp, i)$len
}
return(list(s_cov_mean = mean(s_cov), sc_cov_mean = mean(sc_cov), s_all = s_cov, sc_all = sc_cov, av_len_s = mean(s_len), av_len_sc = mean(sc_len)))
}
Format_results = function(true_beta, out, n_samp, p,model_type){
res_50_1000 = get_avg_cov(true_beta, out[[1]], n_samp, p)
res_50_2000 = get_avg_cov(true_beta, out[[2]], n_samp, p)
res_50_5000 = get_avg_cov(true_beta, out[[3]], n_samp, p)
res_50_10000 = get_avg_cov(true_beta, out[[4]], n_samp, p)
df_50_1000 = data.frame(s = res_50_1000$s_all, sc=res_50_1000$sc_all)
df_50_2000 = data.frame(s = res_50_2000$s_all, sc=res_50_2000$sc_all)
df_50_5000 = data.frame(s = res_50_5000$s_all, sc=res_50_5000$sc_all)
df_50_10000 = data.frame(s = res_50_10000$s_all, sc=res_50_10000$sc_all)
par(mfrow=c(1,4))
boxplot(df_50_1000, main = paste0(model_type, " - 1000"), ylim =c(0.85, 0.99))
boxplot(df_50_2000, main = paste0(model_type, " - 2000"), ylim =c(0.85, 0.99))
boxplot(df_50_5000, main = paste0(model_type, " - 5000"), ylim =c(0.85, 0.99))
boxplot(df_50_10000, main = paste0(model_type, " - 10000"), ylim =c(0.85, 0.99))
out_1000 = c(res_50_1000$s_cov_mean, res_50_1000$sc_cov_mean, res_50_1000$av_len_s, res_50_1000$av_len_sc)
out_2000 = c(res_50_2000$s_cov_mean, res_50_2000$sc_cov_mean, res_50_2000$av_len_s, res_50_2000$av_len_sc)
out_5000 = c(res_50_5000$s_cov_mean, res_50_5000$sc_cov_mean, res_50_5000$av_len_s, res_50_5000$av_len_sc)
out_10000 = c(res_50_10000$s_cov_mean, res_50_10000$sc_cov_mean, res_50_10000$av_len_s, res_50_10000$av_len_sc)
out2 = rbind(out_1000, out_2000, out_5000, out_10000)
colnames(out2) = c("Avcov_s", "Avcov_sc", "Avlen_s", "Avlen_sc")
return(out2)
}
n_samp = seq(1,100)
p = 10;
beta <- readRDS("~/Downloads/GAPLA_FC/Synthetic_Experiments/Model_B2/Simulate_Data/beta_10.RDS")
# Read 50/50 data from STORM
out_50_1000_desparsified <- readRDS("~/luna/GAPLA_FC/Synthetic_Experiments/Model_B2/inference/10/s1_results/out_50_1000_desparsified.RDS")
out_50_2000_desparsified <- readRDS("~/luna/GAPLA_FC/Synthetic_Experiments/Model_B2/inference/10/s1_results/out_50_2000_desparsified.RDS")
out_50_5000_desparsified <- readRDS("~/luna/GAPLA_FC/Synthetic_Experiments/Model_B2/inference/10/s1_results/out_50_5000_desparsified.RDS")
out_50_10000_desparsified <- readRDS("~/luna/GAPLA_FC/Synthetic_Experiments/Model_B2/inference/10/s1_results/out_50_10000_desparsified.RDS")
# Results for 50/50 data
out50 = list(out_50_1000_desparsified, out_50_2000_desparsified, out_50_5000_desparsified, out_50_10000_desparsified)
res_50_s1 = Format_results(true_beta, out50, n_samp, p, "50")
res_50_s1
out_zero_1000_desparsified <- readRDS("~/luna/GAPLA_FC/Synthetic_Experiments/Model_B2/inference/10/s1_results/out_zero_1000_desparsified.RDS")
out_zero_2000_desparsified <- readRDS("~/luna/GAPLA_FC/Synthetic_Experiments/Model_B2/inference/10/s1_results/out_zero_2000_desparsified.RDS")
out_zero_5000_desparsified <- readRDS("~/luna/GAPLA_FC/Synthetic_Experiments/Model_B2/inference/10/s1_results/out_zero_5000_desparsified.RDS")
out_zero_10000_desparsified <- readRDS("~/luna/GAPLA_FC/Synthetic_Experiments/Model_B2/inference/10/s1_results/out_zero_10000_desparsified.RDS")
outzero = list(out_zero_1000_desparsified, out_zero_2000_desparsified, out_zero_5000_desparsified, out_zero_10000_desparsified)
res_zero_s1 = Format_results(true_beta, outzero, n_samp, p, "zero")
res_zero_s1
out_zero_1000_s2_desparsified <- readRDS("~/luna/GAPLA_FC/Synthetic_Experiments/Model_B2/inference/10/s2_results/out_zero_1000_desparsified.RDS")
out_zero_2000_s2_desparsified <- readRDS("~/luna/GAPLA_FC/Synthetic_Experiments/Model_B2/inference/10/s2_results/out_zero_2000_desparsified.RDS")
out_zero_5000_s2_desparsified <- readRDS("~/luna/GAPLA_FC/Synthetic_Experiments/Model_B2/inference/10/s2_results/out_zero_5000_desparsified.RDS")
out_zero_10000_s2_desparsified <- readRDS("~/luna/GAPLA_FC/Synthetic_Experiments/Model_B2/inference/10/s2_results/out_zero_10000_desparsified.RDS")
outzero_s2 = list(out_zero_1000_s2_desparsified, out_zero_2000_s2_desparsified, out_zero_5000_s2_desparsified, out_zero_10000_s2_desparsified)
res_zero_s2 = Format_results(true_beta, outzero_s2, n_samp, p, "zero")
# 50/50 model
out_50_1000_s2_desparsified <- readRDS("~/luna/GAPLA_FC/Synthetic_Experiments/Model_B2/inference/10/s2_results/out_50_1000_desparsified.RDS")
out_50_2000_s2_desparsified <- readRDS("~/luna/GAPLA_FC/Synthetic_Experiments/Model_B2/inference/10/s2_results/out_50_2000_desparsified.RDS")
out_50_5000_s2_desparsified <- readRDS("~/luna/GAPLA_FC/Synthetic_Experiments/Model_B2/inference/10/s2_results/out_50_5000_desparsified.RDS")
out_50_10000_s2_desparsified <- readRDS("~/luna/GAPLA_FC/Synthetic_Experiments/Model_B2/inference/10/s2_results/out_50_10000_desparsified.RDS")
out_50_s2 = list(out_50_1000_s2_desparsified, out_50_2000_s2_desparsified, out_50_5000_s2_desparsified, out_50_10000_s2_desparsified)
res_50_s2 = Format_results(true_beta, out_50_s2, n_samp, p, "50")
res_50_s1
res_50_s2
res_zero_s2
res_zero_s1
setwd("~/Downloads/GAPLA_FC/Synthetic_Experiments/Model_B2/Inference/10")
saveRDS(res_50_s1, "res_50_s1.RDS")
saveRDS(res_zero_s1, "res_zero_s1.RDS")
saveRDS(res_50_s2, "res_50_s2.RDS")
saveRDS(res_zero_s2, "res_zero_s2.RDS")
res_50_s1 <- readRDS("~/Downloads/GAPLA_FC/Synthetic_Experiments/Model_B2/Inference/10/res_50_s1.RDS")
# Inference ---------------------------------------------------------------
res_50_s1 <- readRDS("~/Downloads/GAPLA_FC/Synthetic_Experiments/Model_B2/Inference/10/res_50_s1.RDS")
res_50_s2 <- readRDS("~/Downloads/GAPLA_FC/Synthetic_Experiments/Model_B2/Inference/10/res_50_s2.RDS")
res_zero_s1 <- readRDS("~/Downloads/GAPLA_FC/Synthetic_Experiments/Model_B2/Inference/10/res_zero_s1.RDS")
res_zero_s2 <- readRDS("~/Downloads/GAPLA_FC/Synthetic_Experiments/Model_B2/Inference/10/res_zero_s2.RDS")
rbind(res_50_s1, res_50_s2)
round(rbind(res_50_s1, res_50_s2),2)
round(rbind(res_zero_s1, res_zero_s2),2)
# Results from simulations -------------------------------------------
setwd("~/Downloads/RSE/4_Synthetic_Experiments")
source("Functions_Section_4.R")
library(purrr)
library(pracma) #for logspace
library(Matrix)
library(phonTools)
library(QZ)
library(purrr)
library(matrixStats)
library(complexplus)
library(psych)
library(pracma)
library(hawkes)
library(pROC)
# dimensions
P_vec = c(12,48,96)
metrics = function(res, gt){
av_mse = mean( unlist(lapply(res, function(x) performance_measures(x, gt$theta, F)$l2)) )
se = std_err(unlist(lapply(res, function(x) performance_measures(x, gt$theta, F)$l2)))
return(list(av_mse = av_mse, se = se))
}
# get ground truth
ground_truth_a = Get_ground_truth(P_vec, 1, 0.0628)
ground_truth_b = Get_ground_truth(P_vec, 2, 0.0628)
ground_truth_c = Get_ground_truth(P_vec, 3, 0.0628)
gta_12 = map(ground_truth_a,1)
gta_48 = map(ground_truth_a,2)
gtb_12 = map(ground_truth_b,1)
gtb_48 = map(ground_truth_b,2)
gtc_12 = map(ground_truth_c,1)
gtc_48 = map(ground_truth_c,2)
# load data - all 50 trials
# model a
out1 <- readRDS(paste0("~/Downloads/RSE/4_Synthetic_Experiments/Simulations/Periodogram/Results/out1.RDS")) #p=12
out2 <- readRDS(paste0("~/Downloads/RSE/4_Synthetic_Experiments/Simulations/Periodogram/Results/out2.RDS")) #p=48
# model b
out3 <- readRDS(paste0("~/Downloads/RSE/4_Synthetic_Experiments/Simulations/Periodogram/Results/out3.RDS")) #p=12
out4 <- readRDS(paste0("~/Downloads/RSE/4_Synthetic_Experiments/Simulations/Periodogram/Results/out4.RDS")) #p=48
# model c
out5 <- readRDS(paste0("~/Downloads/RSE/4_Synthetic_Experiments/Simulations/Periodogram/Results/out5.RDS")) #p=12
out6 <- readRDS(paste0("~/Downloads/RSE/4_Synthetic_Experiments/Simulations/Periodogram/Results/out6.RDS")) #p=48
r1 = metrics(out1, gta_12)
r2 = metrics(out2, gta_48)
r3 = metrics(out3, gtb_12)
r4 = metrics(out4, gtb_48)
r5 = metrics(out5, gtc_12)
r6 = metrics(out6, gtc_48)
mse = c(r1$av_mse, r2$av_mse, r3$av_mse, r4$av_mse, r5$av_mse, r6$av_mse)
se = c(r1$se, r2$se, r3$se, r4$se, r5$se, r6$se)
mse
round(mse, 2)
round(se, 2)
r_b<- readRDS("~/Downloads/RSE/4_Synthetic_Experiments/Simulations/Ridge/res_b.RDS")
round(r_b,2)
