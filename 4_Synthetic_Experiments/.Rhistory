setwd("~/Downloads/RSE/4_Synthetic_Experiments")
setwd("~/Downloads/RSE/4_Synthetic_Experiments")
source("Functions_Section_4.R")
P_vec = c(12, 48, 96); n.trials = 10; Big_T = 200;
params = Get_model_parameters(1, P_vec)
library(Matrix)
library(phonTools) #for sinc function
library(QZ) #for H - conjugate transpose
library(purrr) #for map function
library(matrixStats) #for colQuantiles
library(complexplus) #for deterimnan of complex matrix
library(psych) #for trace
library(pracma) #for logspace
library(hawkes) #for simulating hawkes process via Ogata's method
params = Get_model_parameters(1, P_vec)
params$HD_A_list[[1]]
check = simulate_times(n.trials, P_vec[1], Big_T, HD_A_list[[1]], HD_B_list[[1]], nu_list[[1]])$times
HD_A_list = params$HD_A_list
HD_B_list = params$HD_B_list
nu_list = params$nu_list
times_list_12 = simulate_times(n.trials, P_vec[1], Big_T, HD_A_list[[1]], HD_B_list[[1]], nu_list[[1]])$times
object.size(times_list_12)
object.size(times_list_12)*100
object.size(times_list_12, units="MB")
format(object.size(times_list_12), units = "MB")
format(object.size(times_list_12), units = "MB")*100
res1 <- readRDS("~/Downloads/RSE/4_Synthetic_Experiments/Simulate_Data/Training_Data/res1.RDS")
model1_times_10 <- readRDS("~/luna/Regularised_Spectral_Estimation/Section 4/Simulated_Trial_Times/Tuning/T=200/model1_times_10.RDS")
t12 = map(res1, 1)
t12_old = model1_times_10$t12
model2_times_10 <- readRDS("~/luna/Regularised_Spectral_Estimation/Section 4/Simulated_Trial_Times/Tuning/T=200/model2_times_10.RDS")
res2 <- readRDS("~/Downloads/RSE/4_Synthetic_Experiments/Simulate_Data/Training_Data/res2.RDS")
t12_b = map(res2,1)
t12_bold = model2_times_10$t12
t48 = map(res1,2)
t48 _old = model1_times_10$t48
t48_old = model1_times_10$t48
logspace(-1,3,100)
logspace(log10(0.1), log10(100))
logspace(log10(0.01), log10(1))
logspace(log10(0.001), log10(10))
logspace(-3,1)
logspace(log10(0.0001), log10(10))
logspace(-3,1)
logspace(log10(0.001), log10(10))
0.01/10
0.001/10
10/10
logspace(log10(0.001),log10(10),100)
logspace(log10(0.001),log10(10),100) == logspace(-3,1,100)
check = map(res1, 1)
all.equal(check, t12)
glasso
source("Functions_Section_4.R")
glasso
check2 = map(res1,2)
all.equal(check2, t48)
library(doParallel)
library(doRNG)
library(pracma) #for logspace
lambdas = logspace(log10(0.001),log10(10),100)
data_seq = seq(1, 10) #10 samples of training data
grid = expand.grid(sample = data_seq, lams = lambdas)
list_of_pairs <- split(grid, seq(nrow(grid)))
k = list_of_pairs[[1]]
source("Functions_Section_4.R")
library(Matrix)
library(phonTools) #for sinc function
library(QZ) #for H - conjugate transpose
library(purrr) #for map function
library(matrixStats) #for colQuantiles
library(complexplus) #for deterimnan of complex matrix
library(psych) #for trace
library(pracma) #for logspace
library(hawkes) #for simulating hawkes process via Ogata's method
#library(plotrix)
Max_iter = 1000;
n.trials = 10;n.stream = 12 ; Big_T = 200;freq = 0.0628
lambda = as.numeric(k[2])
res1 <- readRDS("~/Downloads/RSE/4_Synthetic_Experiments/Simulate_Data/Training_Data/res1.RDS")
# get data
model_times <- readRDS("res1.RDS")
model_times = map(model_times,2) #for p = 48
model_times = res1
model_times = map(model_times,2) #for p = 48
data_idx = as.numeric(k[1])
data = model_times[[data_idx]]
S_hat = periodogram(data, freq, Big_T)
res = glasso(n.stream, lambda, S_hat, Max_iter)
theta_list = res$theta #get theta estimates
z_list = res$z #gets Z estimate
